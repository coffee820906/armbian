#!/bin/bash

# 相关文件存放路径
make_path="${PWD}"
compile_path="${make_path}/compile-kernel"
kernel_path="${compile_path}/kernel"
config_path="${compile_path}/tools/config"
script_path="${compile_path}/tools/script"
armbian_path="${compile_path}/tools/armbian"
armbian_file="${armbian_path}/armbian.img"
out_kernel="${compile_path}/output"
chroot_path="${out_kernel}/chroot"
chroot_file="${chroot_path}/chroot_armbian.img"
arch_info="$(arch)"
host_release="$(cat /etc/os-release | grep '^VERSION_CODENAME=.*' | cut -d'=' -f2)"

# 设置默认值参数 [ -r ]
# 当设置为 [ -r kernel.org ], Kernel download from kernel.org
kernel_org_repo="https://cdn.kernel.org/pub/linux/kernel/v5.x/"
# 设置默认从 github.com 下载内核源代码
repo_owner="unifreq"
repo_branch="main"
build_kernel=("5.10.125")
auto_kernel="true"
# 设置内核编译对象，选项: [ dtbs / all ]
package_list="all"

# 交叉编译工具链下载镜像
dev_repo="https://github.com/tojbk/amlogic-s9xxx-armbian/releases/download/kernel_compile_tools"
# Arm GNU 工具链源码: https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads
gun_file="arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz"
# Armenian 文件来源: https://github.com/ophub/amlogic-s9xxx-armbian/releases
armbian_rootfs_file="armbian.tar.xz"
# 设置工具链路径
toolchain_path="/usr/local/toolchain"
# 设置默认的交叉编译工具链: [ gcc / clang ]
toolchain_name="clang"

# QEMU 二进制文件
qemu_binary_arm="qemu-arm-static"
qemu_binary_arm64="qemu-aarch64-static"

# 设置字体颜色
STEPS="[\033[95m STEPS \033[0m]"
INFO="[\033[94m INFO \033[0m]"
SUCCESS="[\033[92m SUCCESS \033[0m]"
WARNING="[\033[93m WARNING \033[0m]"
ERROR="[\033[91m ERROR \033[0m]"
#
#==============================================================================================

error_msg() {
    echo -e "${ERROR} ${1}"
    exit 1
}

init_var() {
    echo -e "${STEPS} 开始初始化变量..."

    # 如果后面是[ : ]，则表示该选项需要一个参数值
    get_all_ver="$(getopt "k:a:n:p:r:t:" "${@}")"

    while [[ -n "${1}" ]]; do
        case "${1}" in
        -k | --Kernel)
            if [[ -n "${2}" ]]; then
                oldIFS=$IFS
                IFS=_
                build_kernel=(${2})
                IFS=$oldIFS
                shift
            else
                error_msg "无效的 -k 参数 [ ${2} ]!"
            fi
            ;;
        -a | --AutoKernel)
            if [[ -n "${2}" ]]; then
                auto_kernel="${2}"
                shift
            else
                error_msg "无效的 -a 参数 [ ${2} ]!"
            fi
            ;;
        -n | --customName)
            if [[ -n "${2}" ]]; then
                custom_name="${2// /}"
                [[ ${custom_name:0:1} != "-" ]] && custom_name="-${custom_name}"
                shift
            else
                error_msg "无效的 -n 参数 [ ${2} ]!"
            fi
            ;;
        -p | --PackageList)
            if [[ -n "${2}" ]]; then
                package_list="${2}"
                shift
            else
                error_msg "无效的 -p 参数 [ ${2} ]!"
            fi
            ;;
        -r | --Repository)
            if [[ -n "${2}" ]]; then
                repo_owner="${2}"
                shift
            else
                error_msg "无效的 -r 参数 [ ${2} ]!"
            fi
            ;;
        -t | --Toolchain)
            if [[ -n "${2}" ]]; then
                toolchain_name="${2}"
                shift
            else
                error_msg "无效的 -t 参数 [ ${2} ]!"
            fi
            ;;
        *)
            error_msg "无效选项 [ ${1} ]!"
            ;;
        esac
        shift
    done

    # 接收输入的值 [ -r ] parameter
    input_r_value="${repo_owner//https\:\/\/github\.com\//}"
    code_owner="$(echo "${input_r_value}" | awk -F '@' '{print $1}' | awk -F '/' '{print $1}')"
    code_repo="$(echo "${input_r_value}" | awk -F '@' '{print $1}' | awk -F '/' '{print $2}')"
    code_branch="$(echo "${input_r_value}" | awk -F '@' '{print $2}')"
    #
    [[ -n "${code_owner}" ]] || error_msg "The [ -r ] parameter is invalid."
    [[ -n "${code_branch}" ]] || code_branch="${repo_branch}"
}

toolchain_check() {
    cd ${make_path}
    echo -e "${STEPS} 检查编译内核的工具链..."

    # 为 jammy 安装依赖项
    apt-get -qq update
    apt-get -qq install -y $(cat compile-kernel/tools/script/ubuntu2204-build-armbian-depends)

    # 下载 armbian
    if [[ ! -f "${armbian_file}" ]]; then
        echo -e "${INFO} 下载 Armbian rootfs 文件 [ ${armbian_rootfs_file} ]..."
        rm -rf ${armbian_path} && mkdir -p ${armbian_path}
        wget -q "${dev_repo}/${armbian_rootfs_file}" -O "${armbian_path}/${armbian_rootfs_file}"
        [[ "${?}" -eq "0" ]] || error_msg "Armbian文件下载失败"
        tar -xJf ${armbian_path}/${armbian_rootfs_file} -C ${armbian_path}
        # 将其他名称更改为 armbian.img
        [[ -f "${armbian_file}" ]] || mv -f ${armbian_path}/*.img ${armbian_file}
        # 删除下载文件
        rm -f ${armbian_path}/${armbian_rootfs_file}
        [[ -f "${armbian_file}" ]] || error_msg "没有 Armbian rootfs 文件: [ ${armbian_file} ]"
    fi

    # 下载交叉编译工具链: [ clang / gcc ]
    [[ -d "/etc/apt/sources.list.d" ]] || mkdir -p /etc/apt/sources.list.d
    if [[ "${toolchain_name}" == "clang" ]]; then
        # 设置 llvm 版本
        llvm_version="14"
        echo -e "${INFO} 安装 [ llvm: ${llvm_version} ] 工具链..."

        # 为 llvm 添加 apt 源
        llvm_toolchain_list="/etc/apt/sources.list.d/llvm-toolchain.list"
        echo "deb http://apt.llvm.org/${host_release}/ llvm-toolchain-${host_release}-${llvm_version} main" >${llvm_toolchain_list}
        echo "deb-src http://apt.llvm.org/${host_release}/ llvm-toolchain-${host_release}-${llvm_version} main" >>${llvm_toolchain_list}
        [[ -s "${llvm_toolchain_list}" ]] || error_msg "添加 apt 源失败: [ ${llvm_toolchain_list} ]"
        # 为 llvm 添加 gpg 密钥
        llvm_toolchain_asc="/etc/apt/trusted.gpg.d/llvm-toolchain.asc"
        curl -sL "https://apt.llvm.org/llvm-snapshot.gpg.key" -o "${llvm_toolchain_asc}"
        [[ -s "${llvm_toolchain_asc}" ]] || error_msg "添加 gpg 密钥失败: [ ${llvm_toolchain_asc} ]"

        # 设置安装包，参考源码: https://apt.llvm.org/
        llvm_pkg="\
        clang-${llvm_version} lldb-${llvm_version} lld-${llvm_version} clangd-${llvm_version} clang-tidy-${llvm_version} \
        clang-format-${llvm_version} clang-tools-${llvm_version} llvm-${llvm_version}-dev lld-${llvm_version} lldb-${llvm_version} \
        llvm-${llvm_version}-tools libomp-${llvm_version}-dev libc++-${llvm_version}-dev libc++abi-${llvm_version}-dev \
        libclang-common-${llvm_version}-dev libclang-${llvm_version}-dev libclang-dev libunwind-${llvm_version}-dev \
        "
        # 安装 llvm
        apt-get -qq install -y ${llvm_pkg}

        # 设置交叉编译参数
        export CROSS_COMPILE="aarch64-linux-gnu-"
        export CC="clang"
        export LD="ld.lld"
        export MFLAGS=" LLVM=1 LLVM_IAS=1 "
    else
        # 下载 Arm GNU 工具链
        [[ -d "${toolchain_path}" ]] || mkdir -p ${toolchain_path}
        if [[ ! -d "${toolchain_path}/${gun_file//.tar.xz/}/bin" ]]; then
            echo -e "${INFO} 下载 ARM GNU 工具 [ ${gun_file} ]..."
            wget -q "${dev_repo}/${gun_file}" -O "${toolchain_path}/${gun_file}"
            [[ "${?}" -eq "0" ]] || error_msg "GNU 文件下载失败"
            tar -xJf ${toolchain_path}/${gun_file} -C ${toolchain_path}
            rm -f ${toolchain_path}/${gun_file}
            [[ -d "${toolchain_path}/${gun_file//.tar.xz/}/bin" ]] || error_msg "gcc 没有设置！"
        fi

        # 添加 ${PATH} 变量
        path_ubuntu="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
        path_gcc="${toolchain_path}/${gun_file//.tar.xz/}/bin:${path_ubuntu}"
        export PATH="${path_gcc}"

        # 设置交叉编译参数
        export CROSS_COMPILE="${toolchain_path}/${gun_file//.tar.xz/}/bin/aarch64-none-linux-gnu-"
        export CC="${CROSS_COMPILE}gcc"
        export LD="${CROSS_COMPILE}ld.bfd"
        export MFLAGS=""
    fi
}

query_version() {
    cd ${make_path}
    echo -e "${STEPS} 查询是否是最新内核版本..."

    # 设置空数组
    tmp_arr_kernels=()

    # 循环查询是否是最新内核
    i=1
    for KERNEL_VAR in ${build_kernel[*]}; do
        echo -e "${INFO} (${i}) 自动查询同系列的最新内核版本 [ ${KERNEL_VAR} ]"
        # 识别内核主线
        MAIN_LINE="$(echo ${KERNEL_VAR} | awk -F '.' '{print $1"."$2}')"

        if [[ "${code_owner}" == "kernel.org" ]]; then
            # latest_version="5.10.125"
            latest_version="$(curl -s ${kernel_org_repo} | grep -oE linux-${MAIN_LINE}.[0-9]+.tar.xz | sort -rV | head -n 1 | grep -oE '[1-9].[0-9]{1,3}.[0-9]+')"
            if [[ "${?}" -eq "0" && -n "${latest_version}" ]]; then
                tmp_arr_kernels[${i}]="${latest_version}"
            else
                error_msg "查询内核版本失败 [ ${kernel_org_repo} ]"
            fi
            echo -e "${INFO} (${i}) [ ${tmp_arr_kernels[$i]} ] 是 kernel.org 最新的内核. \n"
        else
            if [[ -z "${code_repo}" ]]; then linux_repo="linux-${MAIN_LINE}.y"; else linux_repo="${code_repo}"; fi
            github_kernel_repo="${code_owner}/${linux_repo}/${code_branch}"
            github_kernel_ver="https://raw.githubusercontent.com/${github_kernel_repo}/Makefile"
            # latest_version="125"
            latest_version="$(curl -s ${github_kernel_ver} | grep -oE "SUBLEVEL =.*" | head -n 1 | grep -oE '[0-9]{1,3}')"
            if [[ "${?}" -eq "0" && -n "${latest_version}" ]]; then
                tmp_arr_kernels[${i}]="${MAIN_LINE}.${latest_version}"
            else
                error_msg "查询内核版本失败 [ github.com/${github_kernel_repo} ]"
            fi
            echo -e "${INFO} (${i}) [ ${tmp_arr_kernels[$i]} ] 是 github.com/${github_kernel_repo} 最新的内核. \n"
        fi

        let i++
    done

    # 将内核数组重置为最新的内核版本
    unset build_kernel
    build_kernel="${tmp_arr_kernels[*]}"
}

get_kernel_source() {
    cd ${make_path}
    echo -e "${STEPS} 下载内核源码..."

    # 内核文件夹 > kernel_.tar.xz_file > 从 kernel.org 下载
    [[ -d "${kernel_path}" ]] || mkdir -p ${kernel_path}
    if [[ ! -d "${kernel_path}/${local_kernel_path}" ]]; then
        if [[ "${code_owner}" == "kernel.org" ]]; then
            if [[ -f "${kernel_path}/${local_kernel_path}.tar.xz" ]]; then
                echo -e "${INFO} 解压本地文件 [ ${local_kernel_path}.tar.xz ]"
                cd ${kernel_path}
                tar -xJf ${local_kernel_path}.tar.xz
                [[ "${?}" -eq "0" ]] || error_msg "[ ${local_kernel_path}.tar.xz ] 文件解压失败."
            else
                echo -e "${INFO} [ ${kernel_version} ] 内核加载自 [ ${server_kernel_repo}${local_kernel_path}.tar.xz ]"
                wget -q -P ${kernel_path} ${server_kernel_repo}${local_kernel_path}.tar.xz
                if [[ "${?}" -eq "0" && -s "${kernel_path}/${local_kernel_path}.tar.xz" ]]; then
                    echo -e "${SUCCESS} 内核文件下载成功."
                    cd ${kernel_path}
                    tar -xJf ${local_kernel_path}.tar.xz
                    [[ -d "${local_kernel_path}" ]] || error_msg "[ ${local_kernel_path}.tar.xz ] 文件解压失败."
                else
                    error_msg "内核文件下载失败!"
                fi
            fi
        else
            echo -e "${INFO} 下载内核源码 [ https://github.com/${server_kernel_repo} -b ${code_branch} ]"
            git clone -q --single-branch --depth 1 https://github.com/${server_kernel_repo} -b ${code_branch} ${kernel_path}/${local_kernel_path}
            [[ "${?}" -eq "0" ]] || error_msg "[ https://github.com/${server_kernel_repo} ] 内核源码下载失败."
        fi
    elif [ "${code_owner}" != "kernel.org" ]; then
        # 获取本地内核版本
        local_makefile="${kernel_path}/${local_kernel_path}/Makefile"
        local_makefile_version="$(cat ${local_makefile} | grep -oE "VERSION =.*" | head -n 1 | grep -oE '[0-9]{1,3}')"
        local_makefile_patchlevel="$(cat ${local_makefile} | grep -oE "PATCHLEVEL =.*" | head -n 1 | grep -oE '[0-9]{1,3}')"
        local_makefile_sublevel="$(cat ${local_makefile} | grep -oE "SUBLEVEL =.*" | head -n 1 | grep -oE '[0-9]{1,3}')"

        # 本地版本与服务器版本对比
        if [[ "${auto_kernel}" == "true" && "${kernel_sub}" -gt "${local_makefile_sublevel}" ]]; then
            # 获取服务器最新源码
            cd ${kernel_path}/${local_kernel_path}
            git checkout ${code_branch} && git reset --hard origin/${code_branch} && git pull
            unset kernel_version
            kernel_version="${local_makefile_version}.${local_makefile_patchlevel}.${kernel_sub}"
            echo -e "${INFO} 同步上游源码，编译内核版本 [ ${kernel_version} ]."
        else
            # 重置为本地内核版本号
            unset kernel_version
            kernel_version="${local_makefile_version}.${local_makefile_patchlevel}.${local_makefile_sublevel}"
            echo -e "${INFO} 使用本地源代码，编译内核版本 [ ${kernel_version} ]."
        fi
    fi
}

headers_install() {
    cd ${kernel_path}/${local_kernel_path}

    # 设置 headers 文件列表
    head_list="$(mktemp)"
    (
        find . arch/${ARCH} -maxdepth 1 -name Makefile\*
        find include scripts -type f -o -type l
        find arch/${ARCH} -name Kbuild.platforms -o -name Platform
        find $(find arch/${ARCH} -name include -o -name scripts -type d) -type f
    ) >${head_list}

    # 设置 object 文件列表
    obj_list="$(mktemp)"
    {
        [[ -n "$(grep "^CONFIG_OBJTOOL=y" include/config/auto.conf 2>/dev/null)" ]] && echo "tools/objtool/objtool"
        find arch/${ARCH}/include Module.symvers include scripts -type f
        [[ -n "$(grep "^CONFIG_GCC_PLUGINS=y" include/config/auto.conf 2>/dev/null)" ]] && find scripts/gcc-plugins -name \*.so
    } >${obj_list}

    # 安装相关文件到指定目录
    tar --exclude '*.orig' -c -f - -C ${kernel_path}/${local_kernel_path} -T ${head_list} | tar -xf - -C ${out_kernel}/header
    tar --exclude '*.orig' -c -f - -T ${obj_list} | tar -xf - -C ${out_kernel}/header

    # 将 .config 复制到指定的位置
    cp -f .config ${out_kernel}/header/.config

    # 删除临时文件
    rm -f ${head_list} ${obj_list}
}

compile_env() {
    cd ${make_path}
    echo -e "${STEPS} 检查编译环境..."

    # 获取内核版本
    kernel_outname="${kernel_version}${custom_name}"
    echo -e "${INFO} 编译的内核版本: [ ${kernel_outname} ]"

    # 创建 temp 目录
    echo -e "${INFO} 创建 temp 目录: [ ${out_kernel} ]"
    rm -rf ${out_kernel}/{chroot/,boot/,dtb/,modules/,header/,${kernel_version}/}
    mkdir -p ${out_kernel}/{chroot/{root/boot/,},boot/,dtb/{allwinner/,amlogic/,rockchip/},modules/,header/,${kernel_version}/}

    cd ${kernel_path}/${local_kernel_path}
    echo -e "${STEPS} 设置交叉编译参数..."

    # 设置交叉编译参数
    export ARCH="arm64"
    export LOCALVERSION="${custom_name}"

    # 显示变量
    echo -e "${INFO} ARCH: [ ${ARCH} ]"
    echo -e "${INFO} LOCALVERSION: [ ${LOCALVERSION} ]"
    echo -e "${INFO} CROSS_COMPILE: [ ${CROSS_COMPILE} ]"
    echo -e "${INFO} CC: [ ${CC} ]"
    echo -e "${INFO} LD: [ ${LD} ]"

    # 设置 make 参数
    MAKE_SET_STRING=" ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} CC=${CC} LD=${LD} ${MFLAGS} LOCALVERSION=${LOCALVERSION} "

    # 创建 clean/mrproper
    make ${MAKE_SET_STRING} mrproper

    # 检查 .config 配置文件
    if [[ ! -s ".config" ]]; then
        [[ -s "${config_path}/config-${kernel_verpatch}" ]] || error_msg "Missing [ config-${kernel_verpatch} ] template!"
        echo -e "${INFO} 复制 [ ${config_path}/config-${kernel_verpatch} ] 到 [ .config ]"
        cp -f ${config_path}/config-${kernel_verpatch} .config
    else
        echo -e "${INFO} 使用当前目录下的.config 配置文件."
    fi
    # 清除内核签名
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"\"|" .config

    # 启用/禁用 Linux 内核 Clang LTO
    [[ "${toolchain_name}" == "clang" ]] && {
        kernel_x="$(echo "${kernel_version}" | cut -d '.' -f1)"
        kernel_y="$(echo "${kernel_version}" | cut -d '.' -f2)"
        if [[ "${kernel_x}" -ge "6" ]] || [[ "${kernel_x}" -eq "5" && "${kernel_y}" -ge "12" ]]; then
            scripts/config -e LTO_CLANG_THIN
        else
            scripts/config -d LTO_CLANG_THIN
        fi
    }

    # 创建菜单配置
    #make ${MAKE_SET_STRING} menuconfig

    # 设置最大线程
    PROCESS="$(cat /proc/cpuinfo | grep "processor" | wc -l)"
    [[ -z "${PROCESS}" ]] && PROCESS="1" && echo "PROCESS: 1"
}

compile_dtbs() {
    cd ${kernel_path}/${local_kernel_path}

    # 创建 dtbs
    echo -e "${STEPS} 编译 dtbs [ ${local_kernel_path} ]..."
    make ${MAKE_SET_STRING} dtbs -j${PROCESS}
    [[ "${?}" -eq "0" ]] && echo -e "${SUCCESS} dtbs 编译成功."
}

compile_kernel() {
    cd ${kernel_path}/${local_kernel_path}

    # 创建 kernel
    echo -e "${STEPS} 编译内核 [ ${local_kernel_path} ]..."
    make ${MAKE_SET_STRING} Image modules dtbs -j${PROCESS}
    [[ "${?}" -eq "0" ]] && echo -e "${SUCCESS} kernel 编译成功."

    # 安装 modules
    echo -e "${STEPS} 安装 modules..."
    make ${MAKE_SET_STRING} INSTALL_MOD_PATH=${out_kernel}/modules modules_install
    [[ "${?}" -eq "0" ]] && echo -e "${SUCCESS} modules 安装成功."

    # 安装 headers
    echo -e "${STEPS} 安装 headers..."
    headers_install
    [[ "${?}" -eq "0" ]] && echo -e "${SUCCESS} headers 安装成功."
}

generate_uinitrd() {
    cd ${make_path}
    echo -e "${STEPS} 创建 chroot..."

    cp -f ${armbian_file} ${chroot_file}

    # 挂载 armbian 系统
    tag_rootfs="${chroot_path}/root"

    loop_armbian="$(losetup -P -f --show "${chroot_file}")"
    [[ -n "${loop_armbian}" ]] || error_msg "losetup ${chroot_file} failed."

    if ! mount ${loop_armbian}p2 ${tag_rootfs}; then
        error_msg "挂载 ${loop_armbian}p2 失败!"
    fi
    if ! mount ${loop_armbian}p1 ${tag_rootfs}/boot; then
        error_msg "挂载 ${loop_armbian}p1 失败!"
    fi

    # 复制 /boot 相关文件 到 armbian系统
    rm -f ${tag_rootfs}/boot/{config-*,initrd.img-*,System.map-*,uInitrd-*,vmlinuz-*,uInitrd,zImage}
    #
    cp -f ${kernel_path}/${local_kernel_path}/System.map ${tag_rootfs}/boot/System.map-${kernel_outname}
    cp -f ${kernel_path}/${local_kernel_path}/.config ${tag_rootfs}/boot/config-${kernel_outname}
    cp -f ${kernel_path}/${local_kernel_path}/arch/arm64/boot/Image ${tag_rootfs}/boot/vmlinuz-${kernel_outname}
    cp -f ${kernel_path}/${local_kernel_path}/arch/arm64/boot/Image ${tag_rootfs}/boot/zImage

    rm -rf ${tag_rootfs}/usr/lib/modules/*
    cp -rf ${out_kernel}/modules/lib/modules/${kernel_outname} ${tag_rootfs}/usr/lib/modules

    compress_initrd_file="${tag_rootfs}/etc/initramfs-tools/initramfs.conf"
    sed -i "/^COMPRESS=/d" ${compress_initrd_file}
    echo "COMPRESS=gzip" >>${compress_initrd_file}

    [[ -f "/usr/bin/${qemu_binary_arm}" ]] && cp -f /usr/bin/${qemu_binary_arm} ${tag_rootfs}/usr/bin/
    [[ -f "/usr/bin/${qemu_binary_arm64}" ]] && cp -f /usr/bin/${qemu_binary_arm64} ${tag_rootfs}/usr/bin/

    cp -f ${script_path}/ubuntu_chroot_armbian.sh ${tag_rootfs}/root
    chmod +x ${tag_rootfs}/root/ubuntu_chroot_armbian.sh && sync

    # 进入 armbian 系统生成 /boot/uInitrd-${kernel_outname} 文件
    echo -e "${INFO} 进入 chroot armbian 系统..."
    chroot ${tag_rootfs} /bin/bash -c "/root/ubuntu_chroot_armbian.sh ${kernel_outname}"
    [[ "${?}" -ne "0" || ! -f "${tag_rootfs}"/boot/uInitrd-${kernel_outname} ]] && error_msg "Create chroot uInitrd-${kernel_outname} file failed."

    cd ${make_path}
    # 将生成的 uInitrd 文件 复制到 当前系统
    echo -e "${INFO} 从中复制生成的文件 [ ${tag_rootfs}/boot ]"
    cp -f ${tag_rootfs}/boot/*${kernel_outname} ${out_kernel}/boot && sync

    # 卸载armbian系统
    umount ${tag_rootfs}/boot 2>/dev/null
    umount ${tag_rootfs} 2>/dev/null
    losetup -D 2>/dev/null
}

packit_dtbs() {
    # 打包 dtbs 文件
    echo -e "${STEPS} 打包 [ ${kernel_outname} ] dtbs 包..."

    cd ${out_kernel}/dtb/allwinner
    cp -f ${kernel_path}/${local_kernel_path}/arch/arm64/boot/dts/allwinner/*.dtb . && chmod +x *
    tar -czf dtb-allwinner-${kernel_outname}.tar.gz *
    mv -f *.tar.gz ${out_kernel}/${kernel_version}
    echo -e "${SUCCESS} The [ dtb-allwinner-${kernel_outname}.tar.gz ] 文件已包."

    cd ${out_kernel}/dtb/amlogic
    cp -f ${kernel_path}/${local_kernel_path}/arch/arm64/boot/dts/amlogic/*.dtb . && chmod +x *
    tar -czf dtb-amlogic-${kernel_outname}.tar.gz *
    mv -f *.tar.gz ${out_kernel}/${kernel_version}
    echo -e "${SUCCESS} The [ dtb-amlogic-${kernel_outname}.tar.gz ] 文件已打包."

    cd ${out_kernel}/dtb/rockchip
    cp -f ${kernel_path}/${local_kernel_path}/arch/arm64/boot/dts/rockchip/*.dtb . && chmod +x *
    tar -czf dtb-rockchip-${kernel_outname}.tar.gz *
    mv -f *.tar.gz ${out_kernel}/${kernel_version}
    echo -e "${SUCCESS} The [ dtb-rockchip-${kernel_outname}.tar.gz ] 文件已打包."
}

packit_kernel() {
    # 打包内核文件
    echo -e "${STEPS} Packing the [ ${kernel_outname} ] 分别打包 boot, modules, header..."

    cd ${out_kernel}/boot
    chmod +x *
    tar -czf boot-${kernel_outname}.tar.gz *
    mv -f *.tar.gz ${out_kernel}/${kernel_version}
    echo -e "${SUCCESS} The [ boot-${kernel_outname}.tar.gz ] boot 文件已打包."

    cd ${out_kernel}/modules/lib/modules
    tar -czf modules-${kernel_outname}.tar.gz *
    mv -f *.tar.gz ${out_kernel}/${kernel_version}
    echo -e "${SUCCESS} The [ modules-${kernel_outname}.tar.gz ] modules 文件已打包."

    cd ${out_kernel}/header
    tar -czf header-${kernel_outname}.tar.gz *
    mv -f *.tar.gz ${out_kernel}/${kernel_version}
    echo -e "${SUCCESS} The [ header-${kernel_outname}.tar.gz ] header 文件已打包."
}

compile_selection() {
    # Compile by selection
    if [[ "${package_list}" == "dtbs" ]]; then
        compile_dtbs
        packit_dtbs
    else
        compile_kernel
        generate_uinitrd
        packit_dtbs
        packit_kernel
    fi

    # 添加 sha256sum 验证文件完整性
    cd ${out_kernel}/${kernel_version}
    sha256sum * >sha256sums
    echo -e "${SUCCESS} The [ sha256sums ] 文件已生成"

    cd ${out_kernel}
    tar -czf ${kernel_version}.tar.gz ${kernel_version} && sync && sleep 3

    echo -e "${INFO} 内核系列文件存放在 [ ${out_kernel} ]."
}

clean_tmp() {
    cd ${make_path}
    echo -e "${STEPS} 清除空间并更新 grub..."

    rm -rf ${out_kernel}/{chroot/,boot/,dtb/,modules/,header/,${kernel_version}/}

    update-grub 2>/dev/null

    echo -e "${SUCCESS} 所有操作已完成."
}

loop_recompile() {
    cd ${make_path}

    j="1"
    for k in ${build_kernel[*]}; do
        # 内核版本 列如 [ 5.10.125 ]
        kernel_version="${k}"
        # 内核版本 例如 [ 5.10 ]
        kernel_verpatch="$(echo ${kernel_version} | awk -F '.' '{print $1"."$2}')"
        # kernel_sub, 例如 [ 125 ]
        kernel_sub="$(echo ${kernel_version} | awk -F '.' '{print $3}')"

        # 循环变量赋值
        if [[ "${code_owner}" == "kernel.org" ]]; then
            server_kernel_repo="${kernel_org_repo}"
            local_kernel_path="linux-${kernel_version}"
        elif [[ -z "${code_repo}" ]]; then
            server_kernel_repo="${code_owner}/linux-${kernel_verpatch}.y"
            local_kernel_path="linux-${kernel_verpatch}.y"
        else
            server_kernel_repo="${code_owner}/${code_repo}"
            local_kernel_path="${code_repo}-${code_branch}"
        fi

        # 依次执行以下函数
        get_kernel_source
        compile_env
        compile_selection
        clean_tmp

        let j++
    done
}

# 检查脚本权限，支持在 x86_64 Ubuntu 上运行: [ jammy ]
[[ "$(id -u)" == "0" ]] || error_msg "请以 root 身份运行此脚本: [ sudo ./${0} ]"
[[ "${arch_info}" == "x86_64" ]] || error_msg "不支持在非 x86_64 Ubuntu 系统上运行此工具."
# 显示欢迎和服务器启动信息
echo -e "${STEPS} 欢迎使用 ophub 分享的 内核编译脚本 编译内核! \n"
echo -e "${INFO} Ubuntu 服务器信息: [ Release: ${host_release} / Host: ${arch_info} ] \n"
echo -e "${INFO} 服务器CPU配置信息: \n$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
echo -e "${INFO} 服务器内存使用: \n$(free -h) \n"
echo -e "${INFO} 开始编译前的服务器空间使用情况: \n$(df -hT ${make_path}) \n"
echo -e "${INFO} 设置的参数: [ ${@} ] \n"
#
# 初始化变量，下载内核源码，查看工具链
init_var "${@}"
[[ "${auto_kernel}" == "true" ]] && query_version
echo -e "${INFO} 内核编译工具链: [ ${toolchain_name} ]"
echo -e "${INFO} 内核源来自: [ ${code_owner} ]"
echo -e "${INFO} 即将的内核: [ $(echo ${build_kernel[*]} | tr "\n" " ") ] \n"
toolchain_check
# 循环编译内核
loop_recompile
#
# 显示服务器端信息
echo -e "${STEPS} 编译后服务器空间占用: \n$(df -hT ${make_path}) \n"
echo -e "${SUCCESS} 所有操作成功完成."
# 全部流程完成
wait
